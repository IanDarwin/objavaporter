import java.io.*;

/**
 * Run mvn dependency:list and generate Makefile fragment
 */
public class MavenDeps2OBsdMake {
	static final String POMFILENAME = "pom.xml";
	static final String MAKE_INCLUDE_FILENAME = "mvndistfiles.mk";
	// -B is "Batch", i.e., suppress stupid color highlighting
	static final String COMMAND = "mvn -B dependency:list";
	static final String MASTER_SITES0 = 
		"https://repo1.maven.org/maven2/";

	public static void main(String[] args) throws Exception {
	if (!new File(POMFILENAME).canRead()) {
		System.err.println("Can't open POM file " + POMFILENAME);
		System.err.println("Must run in root of a Mavenized project.");
		return;
	}
	Process p = Runtime.getRuntime().exec(COMMAND);
	try (BufferedReader is = 
		new BufferedReader(new InputStreamReader(p.getInputStream()));
		PrintWriter out = 
			new PrintWriter(new FileWriter(MAKE_INCLUDE_FILENAME))) {
	String line = null;
	boolean doing_dependencies = false;

	out.println("# File generated by " + MavenDeps2OBsdMake.class.getName());
	out.println("MASTER_SITES0 = " + MASTER_SITES0);
	out.println("DISTFILES0 = \\");
	while ((line = is.readLine()) != null) {
		// System.out.println("CANDIDATE: " + line);
		if ("[INFO] The following files have been resolved:".equals(line)) {
			doing_dependencies = true;
			continue;
		}
		if (!doing_dependencies) {
			continue;
		}
		if ("[INFO]".equals(line.trim())) {
			doing_dependencies = false;
			continue;
		}
		line = line.substring(7).trim();
		Dep d = Dep.stringToDep(line);
		out.println(format(d) + " \\");
	}
	out.println();
	}
	}
	static String format(Dep d) {
		// {com/darwinsys/darwinsys-api/1.1.3/}darwinsys-api-1.1.3.jar
		return String.format("%s/%s/%s/ %s-%s.jar",
			d.group.replaceAll("\\.", "/"),
			d.artifact,
			d.vers,
			d.artifact,
			d.vers);
	}

	static class Dep {
		String group;
		String artifact;
		String vers;
		String scope;
		static Dep stringToDep(String s) {
			String[] flds = s.split(":");
			if (flds.length < 4 || flds.length > 5) {
				throw new IllegalArgumentException("Your input sux: " + s);
			}
			Dep d = new Dep();
			if (!flds[2].equals("jar")) {
				throw new IllegalArgumentException("Can only handle JAR deps");
			}
			d.group = flds[0]; d.artifact = flds[1]; d.vers = flds[3];
			return d;
		}
		public String toString() {
			return String.format("Dep: %s:%s:%s", group, artifact, vers);
		}
	}
}
